<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.poho.stuup.dao.AssessRecordMapper">
  <resultMap id="BaseResultMap" type="com.poho.stuup.model.AssessRecord">
    <id column="oid" jdbcType="BIGINT" property="oid" />
    <result column="year_id" jdbcType="BIGINT" property="yearId" />
    <result column="assess_user" jdbcType="BIGINT" property="assessUser" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="assess_type" jdbcType="INTEGER" property="assessType" />
    <result column="score" jdbcType="INTEGER" property="score" />
    <result column="adjust_score" jdbcType="INTEGER" property="adjustScore" />
    <result column="norm_id" jdbcType="BIGINT" property="normId" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="user_name" property="userName" />
    <result column="user_type" property="userType" />
    <result column="year_name" property="yearName" />
    <result column="dept_name" property="deptName" />
    <result column="retire" property="retire" />
    <result column="note" property="note" />
  </resultMap>
  <sql id="Base_Column_List">
    oid, year_id, assess_user, user_id, assess_type, score, adjust_score, norm_id, state, 
    create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from t_assess_record
    where oid = #{oid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_assess_record
    where oid = #{oid,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.poho.stuup.model.AssessRecord">
    insert into t_assess_record (oid, year_id, assess_user, 
      user_id, assess_type, score, 
      adjust_score, norm_id, state, 
      create_time)
    values (#{oid,jdbcType=BIGINT}, #{yearId,jdbcType=BIGINT}, #{assessUser,jdbcType=BIGINT}, 
      #{userId,jdbcType=BIGINT}, #{assessType,jdbcType=INTEGER}, #{score,jdbcType=INTEGER}, 
      #{adjustScore,jdbcType=INTEGER}, #{normId,jdbcType=BIGINT}, #{state,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.poho.stuup.model.AssessRecord">
    insert into t_assess_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="oid != null">
        oid,
      </if>
      <if test="yearId != null">
        year_id,
      </if>
      <if test="assessUser != null">
        assess_user,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="assessType != null">
        assess_type,
      </if>
      <if test="score != null">
        score,
      </if>
      <if test="adjustScore != null">
        adjust_score,
      </if>
      <if test="normId != null">
        norm_id,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="oid != null">
        #{oid,jdbcType=BIGINT},
      </if>
      <if test="yearId != null">
        #{yearId,jdbcType=BIGINT},
      </if>
      <if test="assessUser != null">
        #{assessUser,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="assessType != null">
        #{assessType,jdbcType=INTEGER},
      </if>
      <if test="score != null">
        #{score,jdbcType=INTEGER},
      </if>
      <if test="adjustScore != null">
        #{adjustScore,jdbcType=INTEGER},
      </if>
      <if test="normId != null">
        #{normId,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.poho.stuup.model.AssessRecord">
    update t_assess_record
    <set>
      <if test="yearId != null">
        year_id = #{yearId,jdbcType=BIGINT},
      </if>
      <if test="assessUser != null">
        assess_user = #{assessUser,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="assessType != null">
        assess_type = #{assessType,jdbcType=INTEGER},
      </if>
      <if test="score != null">
        score = #{score,jdbcType=INTEGER},
      </if>
      <if test="adjustScore != null">
        adjust_score = #{adjustScore,jdbcType=INTEGER},
      </if>
      <if test="normId != null">
        norm_id = #{normId,jdbcType=BIGINT},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where oid = #{oid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.poho.stuup.model.AssessRecord">
    update t_assess_record
    set year_id = #{yearId,jdbcType=BIGINT},
      assess_user = #{assessUser,jdbcType=BIGINT},
      user_id = #{userId,jdbcType=BIGINT},
      assess_type = #{assessType,jdbcType=INTEGER},
      score = #{score,jdbcType=INTEGER},
      adjust_score = #{adjustScore,jdbcType=INTEGER},
      norm_id = #{normId,jdbcType=BIGINT},
      state = #{state,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where oid = #{oid,jdbcType=BIGINT}
  </update>
  <select id="queryTotal" parameterType="java.util.HashMap" resultType="int">
    select
    count(tar.oid)
    from t_assess_record as tar
    left join t_assess_range tarr on tarr.user_id = tar.user_id
    <if test="yearId != null">
      AND tarr.year_id = #{yearId,jdbcType=BIGINT}
    </if>
    left join t_user as tu on tu.oid = tar.user_id
    left join t_dept as td on td.oid = tarr.dept_id
    where
    tar.assess_type = #{assessType,jdbcType=INTEGER}
    AND tar.state = 2
    <if test="yearId != null">
      AND tar.year_id = #{yearId,jdbcType=BIGINT}
    </if>
    <if test="deptId != null">
      AND tarr.dept_id = #{deptId,jdbcType=BIGINT}
    </if>
    <if test="score != null">
      AND IFNULL(tar.adjust_score, tar.score) = #{score,jdbcType=INTEGER}
    </if>
    <if test="key != null and key != ''">
      AND tu.user_name LIKE CONCAT(CONCAT('%',#{key}),'%')
    </if>
    <if test="assessUser != null">
      AND tar.assess_user = #{assessUser,jdbcType=BIGINT}
    </if>
  </select>
  <select id="queryList" parameterType="java.util.HashMap" resultMap="BaseResultMap">
    select
    tar.*,
    tu.user_name,
    tu.user_type,
    ty.year_name,
    td.dept_name,
    tarr.retire,
    tarr.note
    from t_assess_record as tar
    left join t_assess_range tarr on tarr.user_id = tar.user_id
    <if test="yearId != null">
      AND tarr.year_id = #{yearId,jdbcType=BIGINT}
    </if>
    left join t_user as tu on tu.oid = tar.user_id
    left join t_year as ty on ty.oid = tar.year_id
    left join t_dept as td on td.oid = tarr.dept_id
    where
    tar.assess_type = #{assessType,jdbcType=INTEGER}
    AND tar.state = 2
    <if test="yearId != null">
      AND tar.year_id = #{yearId,jdbcType=BIGINT}
    </if>
    <if test="deptId != null">
      AND tarr.dept_id = #{deptId,jdbcType=BIGINT}
    </if>
    <if test="score != null">
      AND IFNULL(tar.adjust_score, tar.score) = #{score,jdbcType=INTEGER}
    </if>
    <if test="key != null and key != ''">
      AND tu.user_name LIKE CONCAT(CONCAT('%',#{key}),'%')
    </if>
    <if test="assessUser != null">
      AND tar.assess_user = #{assessUser,jdbcType=BIGINT}
    </if>
    order by tar.oid desc
    <if test="start != null and length != null">
      limit #{start},#{length}
    </if>
  </select>
  <select id="checkAssessRecord" parameterType="java.util.HashMap" resultMap="BaseResultMap">
    SELECT
    tar.*
    FROM
    t_assess_record AS tar
    WHERE 1=1
    <if test="yearId != null">
      AND tar.year_id = #{yearId,jdbcType=BIGINT}
    </if>
    <if test="assessUser != null">
      AND tar.assess_user = #{assessUser,jdbcType=BIGINT}
    </if>
    <if test="assessType != null">
      AND tar.assess_type = #{assessType,jdbcType=INTEGER}
    </if>
    <if test="userId != null">
      AND tar.user_id = #{userId,jdbcType=BIGINT}
    </if>
    <if test="normId != null">
      AND tar.norm_id = #{normId,jdbcType=BIGINT}
    </if>
    ORDER BY
    tar.oid DESC
    LIMIT 1
  </select>
  <update id="updateAdjustScore" parameterType="com.poho.stuup.model.AssessRecord">
    update t_assess_record
    set adjust_score = #{adjustScore,jdbcType=INTEGER}
    where oid = #{oid,jdbcType=BIGINT}
  </update>
  <select id="findAssessTotal" parameterType="java.util.HashMap" resultType="int">
    select
    count(distinct tar.assess_user)
    from t_assess_record as tar
    left join t_assess_range tarr on tarr.user_id = tar.assess_user
    where
    tar.assess_type = #{assessType,jdbcType=INTEGER}
    AND tar.state = 2
    AND tar.year_id = #{yearId,jdbcType=BIGINT}
    AND tarr.year_id = #{yearId,jdbcType=BIGINT}
    <if test="deptId != null">
      AND tarr.dept_id = #{deptId,jdbcType=BIGINT}
    </if>
  </select>
  <select id="findAssessResult" parameterType="java.util.HashMap" resultMap="BaseResultMap">
    SELECT
      tar.assess_user,
      tu.user_name,
      td.dept_name,
      sum(tar.score) AS score
    FROM
      t_assess_record AS tar
    LEFT JOIN t_user AS tu ON tu.oid = tar.assess_user
    LEFT JOIN t_dept AS td ON tu.dept_id = td.oid
    WHERE
      tar.year_id = #{yearId,jdbcType=BIGINT}
      AND tar.user_id = #{userId,jdbcType=BIGINT}
      AND tar.assess_type = #{assessType,jdbcType=INTEGER}
      AND tar.state = 2
    <if test="assessUser != null">
      AND tar.assess_user = #{assessUser,jdbcType=BIGINT}
    </if>
    GROUP BY
      tar.assess_user
  </select>
  <select id="findAssessUserTotal" parameterType="java.util.HashMap" resultType="int">
    SELECT
      count(tar.oid)
    FROM
      t_assess_record AS tar
    LEFT JOIN t_assess_range tarr ON tarr.user_id = tar.user_id
    WHERE
      tar.year_id = #{yearId,jdbcType=BIGINT}
      AND tarr.dept_id = #{deptId,jdbcType=BIGINT}
      AND tar.assess_type = #{assessType,jdbcType=INTEGER}
      AND tar.assess_user = #{assessUser,jdbcType=BIGINT}
      AND tar.state = 1
  </select>
  <update id="updateAssessTeacherState" parameterType="java.util.HashMap">
    UPDATE t_assess_record AS tar
    SET tar.state = 2
    WHERE
      tar.year_id = #{yearId,jdbcType=BIGINT}
      AND tar.assess_type = #{assessType,jdbcType=INTEGER}
      AND tar.assess_user = #{assessUser,jdbcType=BIGINT}
      AND tar.state = 1
  </update>
</mapper>