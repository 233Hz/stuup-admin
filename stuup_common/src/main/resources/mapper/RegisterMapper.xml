<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.poho.stuup.dao.RegisterMapper">
  <resultMap id="BaseResultMap" type="com.poho.stuup.model.Register">
    <id column="oid" jdbcType="BIGINT" property="oid" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="year_id" jdbcType="BIGINT" property="yearId" />
    <result column="position" jdbcType="VARCHAR" property="position" />
    <result column="job" jdbcType="VARCHAR" property="job" />
    <result column="summary" jdbcType="VARCHAR" property="summary" />
    <result column="leader_opinion" jdbcType="VARCHAR" property="leaderOpinion" />
    <result column="group_opinion" jdbcType="VARCHAR" property="groupOpinion" />
    <result column="org_opinion" jdbcType="VARCHAR" property="orgOpinion" />
    <result column="note" jdbcType="VARCHAR" property="note" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="user_name" property="userName" />
    <result column="year_name" property="yearName" />
    <result column="dept_name" property="deptName" />
  </resultMap>
  <sql id="Base_Column_List">
    oid, user_id, year_id, position, job, summary, leader_opinion, group_opinion, org_opinion, 
    note, state, create_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select 
    tr.*,
    ty.year_name
    from t_register as tr
    left join t_year as ty on ty.oid = tr.year_id
    where tr.oid = #{oid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from t_register
    where oid = #{oid,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="com.poho.stuup.model.Register">
    insert into t_register (oid, user_id, year_id, 
      position, job, summary, 
      leader_opinion, group_opinion, org_opinion, 
      note, state, create_time
      )
    values (#{oid,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, #{yearId,jdbcType=BIGINT}, 
      #{position,jdbcType=VARCHAR}, #{job,jdbcType=VARCHAR}, #{summary,jdbcType=VARCHAR}, 
      #{leaderOpinion,jdbcType=VARCHAR}, #{groupOpinion,jdbcType=VARCHAR}, #{orgOpinion,jdbcType=VARCHAR}, 
      #{note,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.poho.stuup.model.Register" useGeneratedKeys="true" keyProperty="oid">
    insert into t_register
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="oid != null">
        oid,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="yearId != null">
        year_id,
      </if>
      <if test="position != null">
        position,
      </if>
      <if test="job != null">
        job,
      </if>
      <if test="summary != null">
        summary,
      </if>
      <if test="leaderOpinion != null">
        leader_opinion,
      </if>
      <if test="groupOpinion != null">
        group_opinion,
      </if>
      <if test="orgOpinion != null">
        org_opinion,
      </if>
      <if test="note != null">
        note,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="oid != null">
        #{oid,jdbcType=BIGINT},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="yearId != null">
        #{yearId,jdbcType=BIGINT},
      </if>
      <if test="position != null">
        #{position,jdbcType=VARCHAR},
      </if>
      <if test="job != null">
        #{job,jdbcType=VARCHAR},
      </if>
      <if test="summary != null">
        #{summary,jdbcType=VARCHAR},
      </if>
      <if test="leaderOpinion != null">
        #{leaderOpinion,jdbcType=VARCHAR},
      </if>
      <if test="groupOpinion != null">
        #{groupOpinion,jdbcType=VARCHAR},
      </if>
      <if test="orgOpinion != null">
        #{orgOpinion,jdbcType=VARCHAR},
      </if>
      <if test="note != null">
        #{note,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.poho.stuup.model.Register">
    update t_register
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="yearId != null">
        year_id = #{yearId,jdbcType=BIGINT},
      </if>
      <if test="position != null">
        position = #{position,jdbcType=VARCHAR},
      </if>
      <if test="job != null">
        job = #{job,jdbcType=VARCHAR},
      </if>
      <if test="summary != null">
        summary = #{summary,jdbcType=VARCHAR},
      </if>
      <if test="leaderOpinion != null">
        leader_opinion = #{leaderOpinion,jdbcType=VARCHAR},
      </if>
      <if test="groupOpinion != null">
        group_opinion = #{groupOpinion,jdbcType=VARCHAR},
      </if>
      <if test="orgOpinion != null">
        org_opinion = #{orgOpinion,jdbcType=VARCHAR},
      </if>
      <if test="note != null">
        note = #{note,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where oid = #{oid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.poho.stuup.model.Register">
    update t_register
    set user_id = #{userId,jdbcType=BIGINT},
      year_id = #{yearId,jdbcType=BIGINT},
      position = #{position,jdbcType=VARCHAR},
      job = #{job,jdbcType=VARCHAR},
      summary = #{summary,jdbcType=VARCHAR},
      leader_opinion = #{leaderOpinion,jdbcType=VARCHAR},
      group_opinion = #{groupOpinion,jdbcType=VARCHAR},
      org_opinion = #{orgOpinion,jdbcType=VARCHAR},
      note = #{note,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where oid = #{oid,jdbcType=BIGINT}
  </update>
  <select id="queryTotal" parameterType="java.util.HashMap" resultType="int">
    select
    count(tr.oid)
    from t_register as tr
    left join t_assess_range as tar on tar.user_id = tr.user_id
    <if test="yearId != null">
      AND tar.year_id = #{yearId,jdbcType=BIGINT}
    </if>
    left join t_user as tu on tu.oid = tr.user_id
    left join t_dept as td on td.oid = tar.dept_id
    where 1=1
    <if test="yearId != null">
      AND tr.year_id = #{yearId,jdbcType=BIGINT}
    </if>
    <if test="deptId != null">
      AND tar.dept_id = #{deptId,jdbcType=BIGINT}
    </if>
    <if test="cond == 'fgld'">
        AND tar.oid in (select assess_range_id from t_range_middle as trm where trm.leader_range_id = ${userRangeId})
    </if>
    <if test="cond == 'dzld'">
        AND tr.state = 3
    </if>
    <if test="cond == 'rlzyccz'">
      <if test="deptId == null">
        AND (tr.state = 3
        <if test="rangeDept != null">
          OR (tr.state = 1 and tar.dept_id = #{rangeDept,jdbcType=BIGINT} and tar.user_type = 5)
        </if>
        )
      </if>
      <if test="deptId != null and deptId == rangeDept">
        AND (tr.state = 3
        OR (tr.state = 1 and tar.dept_id = #{rangeDept,jdbcType=BIGINT} and tar.user_type = 5)
      </if>
      <if test="deptId != null and deptId != rangeDept">
        AND tr.state = 3
      </if>
    </if>
    <if test="cond == 'bmfzr'">
      AND tar.dept_id = #{rangeDept,jdbcType=BIGINT}
      AND tar.user_type = 5
      AND (tr.state = 1 or tr.state = 3)
    </if>
    <if test="state != null">
      AND tr.state = #{state,jdbcType=INTEGER}
    </if>
    <if test="key != null and key != ''">
      AND tu.user_name LIKE CONCAT(CONCAT('%',#{key}),'%')
    </if>
  </select>
  <select id="queryList" parameterType="java.util.HashMap" resultMap="BaseResultMap">
    select
    tr.*,
    tu.user_name,
    ty.year_name,
    td.dept_name
    from t_register as tr
    left join t_assess_range as tar on tar.user_id = tr.user_id
    <if test="yearId != null">
      AND tar.year_id = #{yearId,jdbcType=BIGINT}
    </if>
    left join t_user as tu on tu.oid = tr.user_id
    left join t_year as ty on ty.oid = tr.year_id
    left join t_dept as td on td.oid = tar.dept_id
    where 1=1
    <if test="yearId != null">
      AND tr.year_id = #{yearId,jdbcType=BIGINT}
    </if>
    <if test="deptId != null">
      AND tar.dept_id = #{deptId,jdbcType=BIGINT}
    </if>
    <if test="cond == 'fgld'">
      AND tar.oid in (select assess_range_id from t_range_middle as trm where trm.leader_range_id = #{userRangeId})
    </if>
    <if test="cond == 'dzld'">
      AND tr.state = 3
    </if>
    <if test="cond == 'rlzyccz'">
      <if test="deptId == null">
        AND (tr.state = 3
        <if test="rangeDept != null">
          OR (tr.state = 1 and tar.dept_id = #{rangeDept,jdbcType=BIGINT} and tar.user_type = 5)
        </if>
        )
      </if>
      <if test="deptId != null and deptId == rangeDept">
        AND (tr.state = 3
        OR (tr.state = 1 and tar.dept_id = #{rangeDept,jdbcType=BIGINT} and tar.user_type = 5)
      </if>
      <if test="deptId != null and deptId != rangeDept">
        AND tr.state = 3
      </if>
    </if>
    <if test="cond == 'bmfzr'">
      AND tar.dept_id = #{rangeDept,jdbcType=BIGINT}
      AND tar.user_type = 5
      AND (tr.state = 1 or tr.state = 3)
    </if>
    <if test="state != null">
      AND tr.state = #{state,jdbcType=INTEGER}
    </if>
    <if test="key != null and key != ''">
      AND tu.user_name LIKE CONCAT(CONCAT('%',#{key}),'%')
    </if>
    order by tr.create_time desc
    <if test="start != null and length != null">
      limit #{start},#{length}
    </if>
  </select>
  <select id="checkRegister" parameterType="java.util.HashMap" resultMap="BaseResultMap">
    SELECT
    tr.*
    FROM
    t_register AS tr
    WHERE
    tr.user_id = #{userId,jdbcType=BIGINT}
    <if test="yearId != null">
      AND tr.year_id = #{yearId,jdbcType=BIGINT}
    </if>
    ORDER BY
    tr.oid DESC
    LIMIT 1
  </select>
  <delete id="deleteBatch">
    delete from t_register
    where oid in
    <foreach collection="array" item="id" open="(" close=")" separator=",">
      #{id}
    </foreach>
  </delete>
  <update id="batchUpdate" parameterType="java.util.HashMap">
    update t_register as tr
    set tr.state = #{state,jdbcType=INTEGER}
    where tr.oid in
    <foreach collection="ids" item="id" open="(" close=")" separator=",">
      #{id}
    </foreach>
  </update>
  <select id="findRegTotal" parameterType="java.util.HashMap" resultType="int">
    SELECT
      count(tr.oid)
    FROM
      t_register AS tr
    WHERE
        tr.user_id IN (
        SELECT
          tar.user_id
        FROM
          t_assess_range AS tar
        WHERE (tar.user_type = 3 or tar.user_type = 4 or tar.user_type = 5)
        <if test="yearId != null">
          AND tar.year_id = #{yearId,jdbcType=BIGINT}
        </if>
        <if test="deptId != null">
          AND tar.dept_id = #{deptId,jdbcType=BIGINT}
        </if>
      )
      AND tr.state = 3
    <if test="yearId != null">
      AND tr.year_id = #{yearId,jdbcType=BIGINT}
    </if>
  </select>
</mapper>